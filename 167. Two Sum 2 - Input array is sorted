#1 Approach : Brute Force

```java
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        //int store[];
        
        
        for(int left = 0; left < numbers.length; left++) {
            for(int right = left + 1; right < numbers.length; right++) {
                if(numbers[left] + numbers[right] == target) {
                    return new int[] { left+1, right+1 }; 
                } 
                                
            }
        }
        return null;
    }
}
// T.C = O(n^2)
// S.C = O(1)
```

#2 Approach : Two Pointers

```java
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int low = 0;
        int high = numbers.length - 1;
        
        while(low < high) {
            int sum = numbers[low] + numbers[high];
            
            if(sum == target) {
                return new int[] {low+1,high+1};
            } else if(sum < target) {
                ++low;
            } else {
                --high;
            }
                
        }
        return null;
    }
}

//T.C = O(n)
//S.C = O(1)
```

#3 Approach : Two-pass Hash Table

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], i);
        }
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement) && map.get(complement) != i) {
                return new int[] { i, map.get(complement) };
            }
        }
        return null;
    }
}
// T.C = O(n)
// S.C = O(n)

#4 Approach : One-pass Hash Table

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            map.put(nums[i], i);
        }
        // In case there is no solution, we'll just return null
        return null;
    }
}
