
//#1 Approach : List operation
class Solution {
    public int singleNumber(int[] nums) {
        List<Integer> no_duplicate_list = new ArrayList<>();
        
        for (int i : nums) {
            if (!no_duplicate_list.contains(i)) {
                no_duplicate_list.add(i);
            } else {
                no_duplicate_list.remove(new Integer(i));
            }
        }
         return no_duplicate_list.get(0);
}
}


// T.C : O(n^2)
// S.C : O(n)
// list vs hashset


//#2 Approach : Hash Table
class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer, Integer> hash_table = new HashMap<>();
        
        for (int i : nums) {
            hash_table.put(i, hash_table.getOrDefault(i, 0) + 1);
        }
        for (int i : nums) {
            if(hash_table.get(i) == 1) {
                return i;
            }
        }
        return 0;
}
}

// T.C = O(n)
// S.C = O(n)
// list vs hashset

//#3 Approach : Math
// 2 * (a + b + c) - (a+a+b+b+c) = c

class Solution {
  public int singleNumber(int[] nums) {
    int sumOfSet = 0, sumOfNums = 0;
    Set<Integer> set = new HashSet();

    for (int num : nums) {
      if (!set.contains(num)) {
        set.add(num);
        sumOfSet += num;
      }
      sumOfNums += num;
    }
    return 2 * sumOfSet - sumOfNums;
  }
}

// T.C = O(n)
// S.C = O(n)
